import asyncio
import sqlite3
import logging
import io
from aiogram import Dispatcher, Bot, types, F
from aiogram.filters.command import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile
from aiogram.fsm.context import FSMContext



logging.basicConfig(level=logging.INFO)
bot = Bot(token="6390375163:AAE8DxzAuLz3WJCHvo4_3uZXORIYSD7EyLE")
dp = Dispatcher()
shablon = FSInputFile("img.png")
conn = sqlite3.connect("TGBOOK.db")
c = conn.cursor()
last_messages = {}

class Bookimage(StatesGroup):
    user_send_message = State()
    current_index_book = State()
    waiting_book_name = State()
    waiting_book_autor = State()
    waiting_book_genre = State()
    waiting_uppdate_text = State()
    waiting_uppdate_img = State()
    waiting_review = State()

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [[types.KeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", request_contact=True)]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True

    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–Ω–∏–≥–∞–º–∏.\n"
                         "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –¥–∞–≤–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –∫–Ω–∏–∂–Ω—ã–π –≤–∫—É—Å –æ—Å—Ç–∞–ª—å–Ω—ã–º.",
                         reply_markup=keyboard)

@dp.message(F.contact)
async def print_nomber(message:types.Message):
    if message.contact is not None:
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        phone = str(message.contact.phone_number)
        user_id = int(message.from_user.id)
        
        c.execute("INSERT INTO users (name, id_users) VALUES (?, ?)", (phone, user_id))
        conn.commit()
        kb = [
            [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data='add_book'),
             types.KeyboardButton(text='–ú–æ–∏ –∫–Ω–∏–≥–∏', callback_data="my_book")],
            [types.KeyboardButton(text="–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data='search_book'),
             types.KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='reader')]
        ]
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True

        )
        await message.answer("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! üéâ\n\n"
                             "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å—Å—è –∫–Ω–∏–≥–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.\n"
                             "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üòä", reply_markup=keyboard)

@dp.message(F.text.lower() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", callback_data='add_book'),
         types.KeyboardButton(text='–ú–æ–∏ –∫–Ω–∏–≥–∏', callback_data="my_book")],
        [types.KeyboardButton(text="–ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏", callback_data='search_book'),
         types.KeyboardButton(text="–ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data='reader')]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True

    )
    conn.commit()
    await message.answer("–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª–∏ –¥–∞–≤–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–π –∫–Ω–∏–∂–Ω—ã–π –≤–∫—É—Å –æ—Å—Ç–∞–ª—å–Ω—ã–º.", reply_markup=keyboard)

@dp.message(F.text.lower() == "–ø–æ–∏—Å–∫")
async def search(message: types.Message):
    marup = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="name_book"),
        InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä", callback_data="autor_book"),
        InlineKeyboardButton(text="–ñ–∞–Ω—Ä", callback_data="genre_book")
    ]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∂–µ–ª–∞–µ—Ç–µ –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥—É", reply_markup=marup)

@dp.callback_query(lambda call: call.data == "name_book")
async def search_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
    await state.set_state(Bookimage.waiting_book_name)

@dp.message(Bookimage.waiting_book_name)
async def waiting_name(message: types.Message, state:FSMContext):
    book_name = message.text
    c.execute('SELECT rowid, name FROM book')
    len_book_name = c.fetchall()
    h = 0
    for i in range(len(len_book_name)):
        if len_book_name[i][1].lower() == book_name.lower():
            await show_book_for_search(message.chat.id, int(len_book_name[i][0]))
            h+=1
    if h == 0:
        await message.answer("–ö–Ω–∏–≥–∞ —Å –¥–∞–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()

@dp.callback_query(lambda call: call.data == "autor_book")
async def search_autor(call: types.CallbackQuery, state: FSMContext):
    # await call.answer()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏")
    await state.set_state(Bookimage.waiting_book_autor)


@dp.message(Bookimage.waiting_book_autor)
async def waiting_autor(message: types.Message, state:FSMContext):
    book_name = message.text
    c.execute('SELECT rowid, autor FROM book')
    len_book_name = c.fetchall()
    h = 0
    for i in range(len(len_book_name)):
        if len_book_name[i][1].lower() == book_name.lower():
            await show_book_for_search(message.chat.id, int(len_book_name[i][0]))
            h += 1
    if h == 0:
        await message.answer("–ö–Ω–∏–≥–∞ —Å –¥–∞–Ω–Ω—ã–º –∞–≤—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()

@dp.callback_query(lambda call: call.data == "genre_book")
async def search_genre(call: types.CallbackQuery, state: FSMContext):
    # await call.answer()
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä –∫–Ω–∏–≥–∏")
    await state.set_state(Bookimage.waiting_book_genre)


@dp.message(Bookimage.waiting_book_genre)
async def waiting_genre(message: types.Message, state:FSMContext):
    book_name = message.text
    c.execute('SELECT rowid, genre FROM book')
    len_book_name = c.fetchall()
    h = 0
    for i in range(len(len_book_name)):
        if len_book_name[i][1].lower() == book_name.lower():
            await show_book_for_search(message.chat.id, int(len_book_name[i][0]))
            h += 1
    if h == 0:
        await message.answer("–ö–Ω–∏–≥–∞ —Å –¥–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.clear()


@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
async def add_book(message: types.Message):
    kb = [
        [types.KeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data='public')],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True

    )
    marup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="chek_message")]])
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –∫–Ω–∏–≥–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n–ê–≤—Ç–æ—Ä\n–ñ–∞–Ω—Ä\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–∏–≥–∏\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                         reply_markup=keyboard)
    await bot.send_photo(chat_id=message.chat.id, photo=shablon)

@dp.message(F.text.lower() == "–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
async def public(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    mes = str(last_messages.get(user_id))
    chek_mess = mes.split("\n")
    if len(chek_mess) == 5:
        await message.answer("–æ—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏")
        await state.set_state(Bookimage.user_send_message)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É")

@dp.callback_query(lambda call:call.data == "chek_message")
async def chek_shablon(call: types.CallbackQuery, state: FSMContext):
    user_id = call.from_user.id
    mes = str(last_messages.get(user_id))
    chek_mess = mes.split("\n")
    if len(chek_mess) == 5:
        await call.message.answer("–æ—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –∫–Ω–∏–≥–∏")
        await state.set_state(Bookimage.user_send_message)
    else: await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É")

@dp.message(Bookimage.user_send_message, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = last_messages.get(user_id).split("\n")
    photo = message.photo[-1]
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    image_data = await bot.download_file(file.file_path)
    blob_data = image_data.read()
    text.insert(0, message.from_user.id)
    c.execute("SELECT name FROM users WHERE id_users = ?", (user_id,))
    text.insert(1, c.fetchone()[0])
    text.insert(7, blob_data)
    c.execute(
        "INSERT INTO book (id_user, name_user, name, autor, genre, state, description, image) VALUES (?, ?, ?,?,?,?,?,? )",
        text)
    await message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é")
    await state.clear()

@dp.message(F.text.lower() == "–ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏")
async def search_book(message: types.Message, state: FSMContext):
    await state.set_state(Bookimage.current_index_book)
    kb = [
        [types.KeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–∞—è"), types.KeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è")],
        [types.KeyboardButton(text="–ü–æ–∏—Å–∫")],
        [types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard = kb,
        resize_keyboard = True
    )
    await message.answer("–ù–∞–π–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–Ω–∏–≥—É", reply_markup=keyboard)
    await show_book(message.chat.id, 0)

async def show_book_for_search(chat_id, index):
    c.execute("SELECT rowid, * FROM book")
    show_kniga = c.fetchall()
    book_data = []
    for i in range(len(show_kniga)):
        if show_kniga[i][0] == index:
            book_data = show_kniga[i]
    image_file = io.BytesIO(book_data[7])
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[3]}\n–ê–≤—Ç–æ—Ä: {book_data[4]}\n–ñ–∞–Ω—Ä: {book_data[5]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[8]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[6]}"
    marup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={book_data[1]}"),InlineKeyboardButton(text="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"AddReadingBook_{book_data[0]}"), InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data=f"review_{book_data[0]}")]])
    await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption, chat_id=chat_id, reply_markup=marup)
async def show_book(chat_id, index):
    c.execute("SELECT rowid, * FROM book")
    book_data = c.fetchall()[index]
    image_file = io.BytesIO(book_data[7])
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[3]}\n–ê–≤—Ç–æ—Ä: {book_data[4]}\n–ñ–∞–Ω—Ä: {book_data[5]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[8]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[6]}"
    marup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={book_data[1]}"),InlineKeyboardButton(text="–í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"AddReadingBook_{book_data[0]}"), InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã", callback_data=f"review_{book_data[0]}")]])
    await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption, chat_id=chat_id, reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("review_"))
async def book_review(call: types.CallbackQuery):
    review_data = call.data.split("_")[1]
    c.execute("SELECT review_text FROM review WHERE id_book = ?", (review_data,))
    text = c.fetchall()
    if len(text) != 0:
        for i in range(len(text)):
            await call.message.answer(f"–û—Ç–∑—ã–≤ ‚Ññ{i+1}:\n{text[i][0]}")
    else: await call.message.answer("–£ –¥–∞–Ω–Ω—ã–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")


@dp.callback_query(lambda call: call.data.startswith("AddReadingBook_"))
async def reading_book(call:types.CallbackQuery):
    id_book = call.data.split("_")[1]
    id_user = call.from_user.id
    c.execute("INSERT INTO reading_book (id_user, id_book) VALUES (?, ?)", (id_user, id_book))
    await call.message.answer("–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

@dp.message(F.text.lower() == "—Å–ª–µ–¥—É—é—â–∞—è")
async def next_book(message: types.Message, state: FSMContext):
    c.execute("SELECT * FROM book")
    book_data = c.fetchall()
    state_data = await state.get_data()
    current_index = state_data.get('current_index', 0)

    if current_index < len(book_data) - 1:
        current_index += 1
        await state.update_data(current_index=current_index)
        await show_book(message.chat.id, current_index)
    else:
        await message.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–∏–≥–∞.")

@dp.message(F.text.lower() == "–ø—Ä–µ–¥—ã–¥—É—â–∞—è")
async def previous_book(message: types.Message, state: FSMContext):
    state_data = await state.get_data()
    current_index = state_data.get('current_index', 0)

    if current_index > 0:
        current_index -= 1
        await state.update_data(current_index=current_index)
        await show_book(message.chat.id, current_index)
    else:
        await message.answer("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞.")

@dp.message(F.text.lower() == "–º–æ–∏ –∫–Ω–∏–≥–∏")
async def my_book(message: types.Message):
    chat_id = message.chat.id
    kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–Ω–∏–≥–∏", reply_markup=keyboard)
    c.execute("SELECT rowid, * FROM book WHERE id_user = ?", (chat_id,))
    book_data = c.fetchall()
    for i in range(len(book_data)):
        image_file = io.BytesIO(book_data[i][7])
        caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[i][3]}\n–ê–≤—Ç–æ—Ä: {book_data[i][4]}\n–ñ–∞–Ω—Ä: {book_data[i][5]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[i][8]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[i][6]}"
        marup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"replace_{book_data[i][0]}"),
             InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"refactor_{book_data[i][0]}")]])
        await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption,
                             chat_id=chat_id, reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("refactor_"))
async def refactor_book(call: types.CallbackQuery):
    book_rewiev = call.data.split("_")[1]
    marup = InlineKeyboardMarkup(inline_keyboard=([[InlineKeyboardButton(text="–¢–µ–∫—Å—Ç", callback_data=f"RefactorBookText_{book_rewiev}"),InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data=f"RefactorBookImg_{book_rewiev}")]]))
    await call.message.answer("–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("replace_"))
async def replace_book(call:types.CallbackQuery):
    book_replace = call.data.split("_")[1]
    marup = InlineKeyboardMarkup(inline_keyboard=([[InlineKeyboardButton(text="–î–∞", callback_data=f"YesReplace_{book_replace}")]]))
    await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?",reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("YesReplace_"))
async def YesReplace(call:types.CallbackQuery):
    id_delete = call.data.split("_")[1]
    c.execute("DELETE FROM book WHERE rowid = ?", (id_delete,))
    await call.message.answer("–í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")

@dp.callback_query(lambda call: call.data.startswith("RefactorBookText_"))
async def refactor_book_text(call: types.CallbackQuery, state: FSMContext):
    book_text = call.data.split("_")[1]
    await state.update_data(book_text=book_text)
    await call.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –∫–Ω–∏–≥–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∏–º–µ—Ä—É:\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n–ê–≤—Ç–æ—Ä\n–ñ–∞–Ω—Ä\n–°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–∏–≥–∏\n–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    await state.set_state(Bookimage.waiting_uppdate_text)

@dp.message(Bookimage.waiting_uppdate_text)
async def waiting_name(message: types.Message, state:FSMContext):
    mes = message.text
    data = await state.get_data()
    book_text = data.get('book_text')
    chat_id = message.from_user.id
    chek_mess = mes.split("\n")
    if len(chek_mess) != 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —à–∞–±–ª–æ–Ω—É")
    else:
        c.execute("UPDATE book SET name = ?, autor = ?, genre = ?, state = ?, description = ? WHERE rowid = ?" , (chek_mess[0],chek_mess[1],chek_mess[2],chek_mess[3],chek_mess[4], book_text))
        conn.commit()
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–π –∫–Ω–∏–≥–µ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        c.execute("SELECT name, autor, genre, state, description, image FROM book WHERE rowid = ?", (book_text,))
        book_data = c.fetchall()
        image_file = io.BytesIO(book_data[0][5])
        marup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"replace_{book_text}"),
             InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"refactor_{book_text}")]])
        caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[0][0]}\n–ê–≤—Ç–æ—Ä: {book_data[0][1]}\n–ñ–∞–Ω—Ä: {book_data[0][2]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[0][3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[0][4]}"
        await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption,
                             chat_id=chat_id, reply_markup=marup)
    await state.clear()

@dp.callback_query(lambda call: call.data.startswith("RefactorBookImg_"))
async def refactor_book_text(call: types.CallbackQuery, state: FSMContext):
    book_img = call.data.split("_")[1]
    await state.update_data(book_img=book_img)
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏")
    await state.set_state(Bookimage.waiting_uppdate_img)

@dp.message(Bookimage.waiting_uppdate_img)
async def waiting_name(message: types.Message, state:FSMContext):
    photo = message.photo[-1]
    chat_id = message.chat.id
    data = await state.get_data()
    book_img = data.get('book_img')
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    image_data = await bot.download_file(file.file_path)
    blob_data = image_data.read()
    c.execute("UPDATE book SET image = ? WHERE rowid = ?", (blob_data, book_img))
    await message.answer("–§–æ—Ç–æ –∫–Ω–∏–≥–∏ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    c.execute("SELECT name, autor, genre, state, description, image FROM book WHERE rowid = ?", (book_img,))
    book_data = c.fetchall()
    image_file = io.BytesIO(book_data[0][5])
    marup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"replace_{book_img}"),
         InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"refactor_{book_img}")]])
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[0][0]}\n–ê–≤—Ç–æ—Ä: {book_data[0][1]}\n–ñ–∞–Ω—Ä: {book_data[0][2]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[0][3]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[0][4]}"
    await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption,
                         chat_id=chat_id, reply_markup=marup)
    await state.clear()

@dp.message(F.text.lower() == "–∏–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def reading(message: types.Message):
    chat_id = message.chat.id
    c.execute("SELECT rowid, * FROM book")
    kb = [[types.KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=kb,
        resize_keyboard=True
    )
    await message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–Ω–∏–≥–∏", reply_markup=keyboard)
    c.execute("SELECT rowid, * FROM reading_book WHERE id_user = ?", (chat_id,))
    reading_book_data = c.fetchall()
    for i in range(len(reading_book_data)):
        c.execute("SELECT rowid, * FROM book WHERE rowid = ?", (reading_book_data[i][2],))
        book_data = c.fetchall()
        marup = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è", url=f"tg://user?id={book_data[0][1]}"),
        InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"AddReview_{book_data[0][0]}_{book_data[0][1]}"),
        InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reading_book_data[i][0]}")
        ]])
        image_file = io.BytesIO(book_data[0][7])
        caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ: {book_data[0][3]}\n–ê–≤—Ç–æ—Ä: {book_data[0][4]}\n–ñ–∞–Ω—Ä: {book_data[0][5]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {book_data[0][8]}\n–û–ø–∏—Å–∞–Ω–∏–µ: {book_data[0][6]}"
        await bot.send_photo(photo=BufferedInputFile(image_file.read(), filename='screenshot.png'), caption=caption,
                             chat_id=chat_id, reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("delete_"))
async def delete_from_star(call: types.CallbackQuery):
    delete = call.data.split("_")[1]
    marup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"YesDelete_{delete}")]])
    await call.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö?", reply_markup=marup)

@dp.callback_query(lambda call: call.data.startswith("YesDelete_"))
async def YesDelete(call: types.CallbackQuery):
    delete = call.data.split("_")[1]
    c.execute("DELETE FROM reading_book WHERE rowid = ?", (delete,))

    await call.message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö")

@dp.callback_query(lambda call: call.data.startswith("AddReview_"))
async def add_review(call:types.CallbackQuery, state: FSMContext):
    id_book = call.data.split("_")[1]
    id_user = call.data.split("_")[2]
    await state.update_data(id_book=id_book)
    await state.update_data(id_user=id_user)
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∫ –∫–Ω–∏–≥–µ")
    await state.set_state(Bookimage.waiting_review)

@dp.message(Bookimage.waiting_review)
async def waiting_review(message:types.Message, state: FSMContext):
    review_text = message.text
    data = await state.get_data()
    id_book = data.get('id_book')
    data = await state.get_data()
    id_user = data.get('id_user')
    c.execute("INSERT INTO review(id_book, id_user, review_text) VALUES (?,?,?)", (id_book, id_user, review_text))
    await message.answer("–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω")


@dp.message()
async def save_last_message(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_messages[message.from_user.id] = message.text

@dp.callback_query()
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())


